<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.0" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>Blinky example</documentation>
 <!--${qpcpp}-->
 <framework name="qpcpp"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Blinky}-->
  <class name="Blinky" superclass="qpcpp::QActive">
   <!--${AOs::Blinky::m_timeEvt}-->
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky::inst}-->
   <attribute name="inst" type="Blinky" visibility="0x00" properties="0x01"/>
   <!--${AOs::Blinky::m_intervalStartTime}-->
   <attribute name="m_intervalStartTime" type="std::uint64_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_intervalEndTime}-->
   <attribute name="m_intervalEndTime" type="std::uint64_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_intervalElapsedTime}-->
   <attribute name="m_intervalElapsedTime" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_intervalElapsedTimeDelta}-->
   <attribute name="m_intervalElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_maxElapsedTimeDelta}-->
   <attribute name="m_maxElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_intervalCount}-->
   <attribute name="m_intervalCount" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_minElapsedTimeDelta}-->
   <attribute name="m_minElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_avgElapsedTimeDelta}-->
   <attribute name="m_avgElapsedTimeDelta" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::kIntervalOffset}-->
   <attribute name="kIntervalOffset" type="const std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_avgElapsedTime}-->
   <attribute name="m_avgElapsedTime" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::m_intervalThresholdCount}-->
   <attribute name="m_intervalThresholdCount" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Blinky::Blinky}-->
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U),
    kIntervalOffset(4)</code>
   </operation>
   <!--${AOs::Blinky::UpdateElapsedTime}-->
   <operation name="UpdateElapsedTime" type="void" visibility="0x00" properties="0x00">
    <code>static uint16_t s_updateCount = 0;
m_intervalEndTime = getMicros();
uint32_t elapsedTime = m_intervalEndTime - m_intervalStartTime;
uint32_t elapsedTimeDelta = 0;

if ( elapsedTime &gt; 1000 )
{
    if ( s_updateCount &gt; kIntervalOffset )
    {
        if ( elapsedTime &gt; m_intervalElapsedTime )
            elapsedTimeDelta = elapsedTime - m_intervalElapsedTime;
        else
            elapsedTimeDelta = m_intervalElapsedTime - elapsedTime;

        m_intervalCount += 1;

        if ( elapsedTimeDelta &gt; m_maxElapsedTimeDelta )
        {
            m_maxElapsedTimeDelta = elapsedTimeDelta;
        }
        if ( elapsedTimeDelta &lt; m_minElapsedTimeDelta )
        {
            m_minElapsedTimeDelta = elapsedTimeDelta;
        }

        m_avgElapsedTimeDelta += elapsedTimeDelta;
        m_avgElapsedTime += elapsedTime;

        if ( elapsedTimeDelta &gt; 100 )
        {
            m_intervalThresholdCount += 1;
        }
    }

    m_intervalElapsedTime = elapsedTime;
    s_updateCount += 1;
}</code>
   </operation>
   <!--${AOs::Blinky::DisplayElapsedTime}-->
   <operation name="DisplayElapsedTime" type="void" visibility="0x00" properties="0x00">
    <code>CONSOLE_DISPLAY_ARGS(&quot;elapsed time us = %d\r\n&quot;, m_intervalElapsedTime);</code>
   </operation>
   <!--${AOs::Blinky::DisplayElapsedTimeDelta}-->
   <operation name="DisplayElapsedTimeDelta" type="void" visibility="0x00" properties="0x00">
    <code>if ( m_intervalCount &gt; 120 )
{
    m_avgElapsedTimeDelta = m_avgElapsedTimeDelta / m_intervalCount;
    m_avgElapsedTime = m_avgElapsedTime / m_intervalCount;

    CONSOLE_DISPLAY_ARGS(&quot;max/min/avg/avg/cnt elapsed time delta us = %d/%d/%d/%d/%d\r\n&quot;,
        m_maxElapsedTimeDelta, m_minElapsedTimeDelta,
        m_avgElapsedTimeDelta, m_avgElapsedTime,
        m_intervalThresholdCount);

    m_maxElapsedTimeDelta = 0;
    m_minElapsedTimeDelta = 10000;
    m_avgElapsedTimeDelta = 0;
    m_avgElapsedTime = 0;
    m_intervalEndTime = getMicros();
    m_intervalThresholdCount = 0;
    m_intervalCount = 0;
}</code>
   </operation>
   <!--${AOs::Blinky::SM}-->
   <statechart properties="0x00">
    <!--${AOs::Blinky::SM::initial}-->
    <initial target="../1">
     <action>//m_timeEvt.armX(BSP_TICKS_PER_SEC/2, 0);
(void)e; // unused parameter
m_maxElapsedTimeDelta = 0;
m_minElapsedTimeDelta = 10000;
m_avgElapsedTimeDelta = 0;
m_avgElapsedTime = 0;
m_intervalCount = 0;
m_intervalThresholdCount = 0;</action>
     <initial_glyph conn="2,2,5,1,20,6,-4">
      <action box="0,-2,21,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Blinky::SM::off}-->
    <state name="off">
     <entry brief="off">m_timeEvt.armX(1000, 0U);
m_intervalStartTime = getMicros();
BSP_ledOff();</entry>
     <!--${AOs::Blinky::SM::off::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <action>UpdateElapsedTime();
DisplayElapsedTimeDelta();</action>
      <tran_glyph conn="2,14,3,1,18,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::Blinky::SM::on}-->
    <state name="on">
     <entry brief="on">m_timeEvt.armX(1000, 0U);
m_intervalStartTime = getMicros();
BSP_ledOn();</entry>
     <!--${AOs::Blinky::SM::on::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <action>UpdateElapsedTime();
DisplayElapsedTimeDelta();</action>
      <tran_glyph conn="2,28,3,1,20,-17,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph color="2" node="2,20,16,10">
      <entry box="0,3,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="26,34"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::blinky.cpp}-->
  <file name="blinky.cpp">
   <text>#include &quot;qpcpp.hpp&quot;
#include &lt;iostream&gt;
#include &quot;main.h&quot;
#include &quot;console.h&quot;
#include &quot;multiLed.hpp&quot;

using namespace std;
using namespace QP;

#ifdef Q_SPY
    #error Simple Blinky Application does not provide Spy build configuration
#endif

enum { BSP_TICKS_PER_SEC = 2000 };

static uint8_t s_ledIndex = 0;

void BSP_ledOff(void) {
    //consoleDisplay(&quot;LED OFF\r\n&quot;);
    BSP_SetLed(CMultiLed::MAX_LEDS, 0);
    BSP_SetLed(s_ledIndex++, 0);
    s_ledIndex %= CMultiLed::MAX_LEDS;
}
void BSP_ledOn(void) {
    //consoleDisplay(&quot;LED ON\r\n&quot;);
    BSP_SetLed(s_ledIndex, 1);
}

static uint8_t s_clockReady = 0;

void Q_SysTick_Handler(void) {
    if ( s_clockReady )
    {
        QP::QTimeEvt::TICK_X(0U, &amp;l_SysTick_Handler); // time events at rate 0
        QV_ARM_ERRATUM_838869();
    }
}

namespace QP {
namespace QF {
void onStartup(void)
{
    if ( s_clockReady == 0 )
    {
        SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
        s_clockReady = 1;
    }
}

void onCleanup(void) {}
void onClockTick(void) {
    QTimeEvt::TICK_X(0U, nullptr);  // QTimeEvt clock tick processing
}
} // QF
} // QP

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

//=============== ask QM to declare the Blinky class ==================
$declare${AOs::Blinky}

QActive * const AO_Blinky = &amp;Blinky::inst;

int bspMain() {
    static QF_MPOOL_EL(QP::QEvt) smlPoolSto[20];
    QP::QF::poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
    QF::init(); // initialize the framework

    //consoleDisplay(&quot;blinky starting\r\n&quot;);
    QF::onStartup();

    static QEvtPtr blinky_queueSto[10];
    AO_Blinky-&gt;start(1U, // priority
                     blinky_queueSto, Q_DIM(blinky_queueSto),
                     nullptr, 0U); // no stack
    return QF::run(); // run the QF application
}

//================ ask QM to define the Blinky class ==================
$define${AOs::Blinky}</text>
  </file>
 </directory>
</model>
